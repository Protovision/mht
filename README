Mark's hashtable

I needed to make a normal hashtable because all other implementations are either:

* Bloated (packaged with the rest of a really big library)
* Language abusive (Messes with the preprocessor too much)
* Functionally limited (Only string keys allowed)
* Badly designed (Really weird and long function names)

This implementation features:

* Open addressing collision resolution strategy
* Non-empty buckets are linked for fast traversal of entries
* References to entries remain valid even after table modification
* Table automatically grows proportional to a load factor
* Uses only libc

Supported hashtable operations:

* Insert new entry with key/value pair
* Lookup entry from key
* Delete entry
* Clear all entries
* Resize table
* Get first entry
* Get next entry

This implementation stores keys and values by copy, therefore 
inserting/removing an element requires that you pass pointers 
to your key and value.
